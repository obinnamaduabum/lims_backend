package com.hertfordshire.service.flutter_wave;


import com.hertfordshire.model.psql.PaymentMethodInfo;
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.JsonNode;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;

import org.json.JSONObject;

public class FlutterWaveServiceImpl {

    private String VERIFY_ENDPOINT;
    private String secret;


    public void fetchRequiredInfo(PaymentMethodInfo paymentMethodInfo) {
        if (paymentMethodInfo.isLiveActive()) {
            VERIFY_ENDPOINT = paymentMethodInfo.getLiveVerifyUrl();
            this.secret = paymentMethodInfo.getLiveSecret();
        } else {
            VERIFY_ENDPOINT = paymentMethodInfo.getTestingVerifyUrl();
            this.secret = paymentMethodInfo.getTestingSecret();
        }
    }

    /**
     * Method to
     *
     * @param paymententity - <b>paymententity - set as a constant with default value as 1</b>
     * @param txref         - <b>txref - is the unique payment reference generated by the merchant.</b>
     *                      //     * @param secret        - <b>secret - is the merchant secret key</b>
     * @return
     * @throws UnirestException
     */
    public JSONObject verify(String txref, double amount, int paymententity) throws UnirestException, Exception {

        // This packages the payload
        JSONObject data = new JSONObject();
        data.put("txref", txref);
        data.put("SECKEY", this.secret);

        // end of payload

        // This sends the request to server with payload
        HttpResponse<JsonNode> response = Unirest.post(VERIFY_ENDPOINT)
                .header("Content-Type", "application/json")
                .body(data)
                .asJson();

        // This get the response from payload
        JsonNode jsonNode = response.getBody();

        // This get the json object from payload
        JSONObject responseObject = jsonNode.getObject();

        // check of no object is returned
        if (responseObject == null)
            throw new Exception("No response from server");

        // This get status from returned payload
        String status = responseObject.optString("status", null);

        // this ensures that status is not null
        if (status == null)
            throw new Exception("Transaction status unknown");

        // This confirms the transaction exist on rave
        if (!"success".equalsIgnoreCase(status)) {

            String message = responseObject.optString("message", null);

            throw new Exception(message);
        }

        data = responseObject.getJSONObject("data");

        // This get the amount stored on server
        double actualAmount = data.getDouble("amount");

        // This validates that the amount stored on client is same returned
        if (actualAmount != amount)
            throw new Exception("Amount does not match");


        return responseObject;
        // now you can give value for payment.

    }
}
